  






// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.
   
#pragma once


#include "S2C_common.h"

     
namespace Game {
namespace Network {
namespace S2C {


	class Stub : public ::Proud::IRmiStub
	{
	public:
               
		virtual bool SendTest ( ::Proud::HostID, ::Proud::RmiContext& , const string & )		{ 
			return false;
		} 

#define DECRMI_Game_Network_S2C_SendTest bool SendTest ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const string & value) PN_OVERRIDE

#define DEFRMI_Game_Network_S2C_SendTest(DerivedClass) bool DerivedClass::SendTest ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const string & value)
#define CALL_Game_Network_S2C_SendTest SendTest ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const string & value)
#define PARAM_Game_Network_S2C_SendTest ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const string & value)
               
		virtual bool NotifyJoinPlayer ( ::Proud::HostID, ::Proud::RmiContext& , const int & , const HostID & )		{ 
			return false;
		} 

#define DECRMI_Game_Network_S2C_NotifyJoinPlayer bool NotifyJoinPlayer ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & JoinedEntityIndex, const HostID & PlayerHostID) PN_OVERRIDE

#define DEFRMI_Game_Network_S2C_NotifyJoinPlayer(DerivedClass) bool DerivedClass::NotifyJoinPlayer ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & JoinedEntityIndex, const HostID & PlayerHostID)
#define CALL_Game_Network_S2C_NotifyJoinPlayer NotifyJoinPlayer ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & JoinedEntityIndex, const HostID & PlayerHostID)
#define PARAM_Game_Network_S2C_NotifyJoinPlayer ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & JoinedEntityIndex, const HostID & PlayerHostID)
               
		virtual bool GivePlayerItem ( ::Proud::HostID, ::Proud::RmiContext& , const HostID & )		{ 
			return false;
		} 

#define DECRMI_Game_Network_S2C_GivePlayerItem bool GivePlayerItem ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & PlayerHostID) PN_OVERRIDE

#define DEFRMI_Game_Network_S2C_GivePlayerItem(DerivedClass) bool DerivedClass::GivePlayerItem ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & PlayerHostID)
#define CALL_Game_Network_S2C_GivePlayerItem GivePlayerItem ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & PlayerHostID)
#define PARAM_Game_Network_S2C_GivePlayerItem ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & PlayerHostID)
 
		virtual bool ProcessReceivedMessage(::Proud::CReceivedMessage &pa, void* hostTag) PN_OVERRIDE;
		static const PNTCHAR* RmiName_SendTest;
		static const PNTCHAR* RmiName_NotifyJoinPlayer;
		static const PNTCHAR* RmiName_GivePlayerItem;
		static const PNTCHAR* RmiName_First;
		virtual ::Proud::RmiID* GetRmiIDList() PN_OVERRIDE { return g_RmiIDList; }
		virtual int GetRmiIDListCount() PN_OVERRIDE { return g_RmiIDListCount; }
	};

#ifdef SUPPORTS_CPP11 
	
	class StubFunctional : public Stub 
	{
	public:
               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const string & ) > SendTest_Function;
		virtual bool SendTest ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const string & value) 
		{ 
			if (SendTest_Function==nullptr) 
				return true; 
			return SendTest_Function(remote,rmiContext, value); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const int & , const HostID & ) > NotifyJoinPlayer_Function;
		virtual bool NotifyJoinPlayer ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & JoinedEntityIndex, const HostID & PlayerHostID) 
		{ 
			if (NotifyJoinPlayer_Function==nullptr) 
				return true; 
			return NotifyJoinPlayer_Function(remote,rmiContext, JoinedEntityIndex, PlayerHostID); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const HostID & ) > GivePlayerItem_Function;
		virtual bool GivePlayerItem ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & PlayerHostID) 
		{ 
			if (GivePlayerItem_Function==nullptr) 
				return true; 
			return GivePlayerItem_Function(remote,rmiContext, PlayerHostID); 
		}

	};
#endif

}
}
}


