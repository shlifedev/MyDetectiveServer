




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.


#include "S2C_proxy.h"

namespace Game {
namespace Network {
namespace S2C {


        
	bool Proxy::SendTest ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const string & value)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_SendTest;
__msg.Write(__msgid); 
	
__msg << value;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_SendTest, (::Proud::RmiID)Rmi_SendTest);
	}

	bool Proxy::SendTest ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const string & value)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_SendTest;
__msg.Write(__msgid); 
	
__msg << value;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_SendTest, (::Proud::RmiID)Rmi_SendTest);
	}
        
	bool Proxy::NotifyJoinPlayer ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & JoinedEntityIndex, const HostID & PlayerHostID)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyJoinPlayer;
__msg.Write(__msgid); 
	
__msg << JoinedEntityIndex;
__msg << PlayerHostID;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyJoinPlayer, (::Proud::RmiID)Rmi_NotifyJoinPlayer);
	}

	bool Proxy::NotifyJoinPlayer ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int & JoinedEntityIndex, const HostID & PlayerHostID)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyJoinPlayer;
__msg.Write(__msgid); 
	
__msg << JoinedEntityIndex;
__msg << PlayerHostID;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyJoinPlayer, (::Proud::RmiID)Rmi_NotifyJoinPlayer);
	}
        
	bool Proxy::GivePlayerItem ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & PlayerHostID)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_GivePlayerItem;
__msg.Write(__msgid); 
	
__msg << PlayerHostID;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_GivePlayerItem, (::Proud::RmiID)Rmi_GivePlayerItem);
	}

	bool Proxy::GivePlayerItem ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const HostID & PlayerHostID)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_GivePlayerItem;
__msg.Write(__msgid); 
	
__msg << PlayerHostID;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_GivePlayerItem, (::Proud::RmiID)Rmi_GivePlayerItem);
	}
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_SendTest =_PNT("SendTest");
#else
const PNTCHAR* Proxy::RmiName_SendTest =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyJoinPlayer =_PNT("NotifyJoinPlayer");
#else
const PNTCHAR* Proxy::RmiName_NotifyJoinPlayer =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_GivePlayerItem =_PNT("GivePlayerItem");
#else
const PNTCHAR* Proxy::RmiName_GivePlayerItem =_PNT("");
#endif
const PNTCHAR* Proxy::RmiName_First = RmiName_SendTest;

}
}
}



