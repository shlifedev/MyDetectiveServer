




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.

using System;
using System.Net;	     

            
using Nettention.Proud; 
namespace Game.Network.S2C
{
	public class Stub:Nettention.Proud.RmiStub
	{
public AfterRmiInvocationDelegate AfterRmiInvocation = delegate(Nettention.Proud.AfterRmiSummary summary) {};
public BeforeRmiInvocationDelegate BeforeRmiInvocation = delegate(Nettention.Proud.BeforeRmiSummary summary) {};

		public delegate bool SendTestDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, string value);  
		public SendTestDelegate SendTest = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, string value)
		{ 
			return false;
		};
		public delegate bool NotifyJoinPlayerDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int JoinedEntityIndex, HostID PlayerHostID);  
		public NotifyJoinPlayerDelegate NotifyJoinPlayer = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int JoinedEntityIndex, HostID PlayerHostID)
		{ 
			return false;
		};
		public delegate bool GivePlayerItemDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, HostID PlayerHostID);  
		public GivePlayerItemDelegate GivePlayerItem = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, HostID PlayerHostID)
		{ 
			return false;
		};
	public override bool ProcessReceivedMessage(Nettention.Proud.ReceivedMessage pa, Object hostTag) 
	{
		Nettention.Proud.HostID remote=pa.RemoteHostID;
		if(remote==Nettention.Proud.HostID.HostID_None)
		{
			ShowUnknownHostIDWarning(remote);
		}

		Nettention.Proud.Message __msg=pa.ReadOnlyMessage;
		int orgReadOffset = __msg.ReadOffset;
        Nettention.Proud.RmiID __rmiID = Nettention.Proud.RmiID.RmiID_None;
        if (!__msg.Read( out __rmiID))
            goto __fail;
					
		switch(__rmiID)
		{
        case Common.SendTest:
            ProcessReceivedMessage_SendTest(__msg, pa, hostTag, remote);
            break;
        case Common.NotifyJoinPlayer:
            ProcessReceivedMessage_NotifyJoinPlayer(__msg, pa, hostTag, remote);
            break;
        case Common.GivePlayerItem:
            ProcessReceivedMessage_GivePlayerItem(__msg, pa, hostTag, remote);
            break;
		default:
			 goto __fail;
		}
		return true;
__fail:
	  {
			__msg.ReadOffset = orgReadOffset;
			return false;
	  }
	}
    void ProcessReceivedMessage_SendTest(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        string value; MyMarshaler.Read(__msg,out value);	
core.PostCheckReadMessage(__msg, RmiName_SendTest);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=value.ToString()+",";
        NotifyCallFromStub(Common.SendTest, RmiName_SendTest,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.SendTest;
        summary.rmiName = RmiName_SendTest;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =SendTest (remote,ctx , value );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_SendTest);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.SendTest;
        summary.rmiName = RmiName_SendTest;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_NotifyJoinPlayer(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int JoinedEntityIndex; MyMarshaler.Read(__msg,out JoinedEntityIndex);	
HostID PlayerHostID; MyMarshaler.Read(__msg,out PlayerHostID);	
core.PostCheckReadMessage(__msg, RmiName_NotifyJoinPlayer);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=JoinedEntityIndex.ToString()+",";
parameterString+=PlayerHostID.ToString()+",";
        NotifyCallFromStub(Common.NotifyJoinPlayer, RmiName_NotifyJoinPlayer,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotifyJoinPlayer;
        summary.rmiName = RmiName_NotifyJoinPlayer;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotifyJoinPlayer (remote,ctx , JoinedEntityIndex, PlayerHostID );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotifyJoinPlayer);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotifyJoinPlayer;
        summary.rmiName = RmiName_NotifyJoinPlayer;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GivePlayerItem(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        HostID PlayerHostID; MyMarshaler.Read(__msg,out PlayerHostID);	
core.PostCheckReadMessage(__msg, RmiName_GivePlayerItem);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=PlayerHostID.ToString()+",";
        NotifyCallFromStub(Common.GivePlayerItem, RmiName_GivePlayerItem,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GivePlayerItem;
        summary.rmiName = RmiName_GivePlayerItem;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GivePlayerItem (remote,ctx , PlayerHostID );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GivePlayerItem);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GivePlayerItem;
        summary.rmiName = RmiName_GivePlayerItem;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_SendTest="SendTest";
public const string RmiName_NotifyJoinPlayer="NotifyJoinPlayer";
public const string RmiName_GivePlayerItem="GivePlayerItem";
       
public const string RmiName_First = RmiName_SendTest;
#else
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_SendTest="";
public const string RmiName_NotifyJoinPlayer="";
public const string RmiName_GivePlayerItem="";
       
public const string RmiName_First = "";
#endif
		public override Nettention.Proud.RmiID[] GetRmiIDList { get{return Common.RmiIDList;} }
		
	}
}

